import datetime
import json
import os

import pandas as pd
import pydeck as pdk
import streamlit as st
import api_client
import config
import data_utils
import geo_utils

# --- SCRIPT START LOG ---
# print(f"{datetime.datetime.now()} - INFO - app.py script started.") # Optional: uncomment for runtime debugging
# --- CONFIGURATION DE LA PAGE ---
st.set_page_config(layout="wide")

# --- STYLES CSS PERSONNALIS√âS ---
st.markdown(
    """
<style>
    /* Cible les boutons primaires de Streamlit */
    /* Cible les boutons primaires de Streamlit */
    .stButton > button[kind="primary"] {
        font-weight: bold !important;
        border: 1px solid #2980B9 !important; /* Bleu plus fonc√© pour la bordure */
        padding: 0.6em 1.2em !important;
        box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.2) !important;
        background-color: #3498DB !important;  /* Bleu principal */
        color: white !important;
    }

    .stButton > button[kind="primary"]:hover {
        border-color: #1F618D !important; /* Bleu encore plus fonc√© */
        background-color: #2E86C1 !important; /* Bleu l√©g√®rement plus fonc√© */
    }
</style>
""",
    unsafe_allow_html=True,
)

# --- ERM DATA HANDLING FUNCTIONS ---
def load_global_erm_data(file_path=config.DEFAULT_ERM_FILE_PATH):
    """
    Charges les donn√©es ERM (Entreprises, Contacts, Actions) depuis un fichier JSON global.
    Initialise des DataFrames vides avec les sch√©mas d√©finis dans config.py si le fichier n'existe pas ou est corrompu.
    """
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            df_e = pd.DataFrame(data.get("entreprises", []))
            df_c = pd.DataFrame(data.get("contacts", []))
            df_a = pd.DataFrame(data.get("actions", []))

            # Convert specific columns to datetime objects
            date_cols_entreprise = ["Date de cr√©ation Entreprise"]
            date_cols_action = ["Date Action", "Date √âch√©ance"]

            for col in date_cols_entreprise:
                if col in df_e.columns:
                    df_e[col] = pd.to_datetime(df_e[col], errors='coerce')
            for col in date_cols_action:
                if col in df_a.columns:
                    df_a[col] = pd.to_datetime(df_a[col], errors='coerce')

        except (json.JSONDecodeError, KeyError) as e:
            st.error(f"Erreur de lecture ou format incorrect du fichier ERM ({file_path}): {e}. Un nouveau fichier sera utilis√©/cr√©√© si des donn√©es sont sauvegard√©es.")
            df_e = pd.DataFrame(columns=config.ENTREPRISES_ERM_COLS)
            df_c = pd.DataFrame(columns=config.CONTACTS_ERM_COLS)
            df_a = pd.DataFrame(columns=config.ACTIONS_ERM_COLS)
    else:
        df_e = pd.DataFrame(columns=config.ENTREPRISES_ERM_COLS)
        df_c = pd.DataFrame(columns=config.CONTACTS_ERM_COLS)
        df_a = pd.DataFrame(columns=config.ACTIONS_ERM_COLS)

    # Ensure all expected columns are present and in correct order
    df_e = df_e.reindex(columns=config.ENTREPRISES_ERM_COLS)
    df_c = df_c.reindex(columns=config.CONTACTS_ERM_COLS)
    df_a = df_a.reindex(columns=config.ACTIONS_ERM_COLS)
    
    return df_e, df_c, df_a

def save_global_erm_data(df_e, df_c, df_a, file_path=config.DEFAULT_ERM_FILE_PATH):
    """
    Sauvegarde les DataFrames ERM (Entreprises, Contacts, Actions) dans un fichier JSON global.
    Convertit les DataFrames en dictionnaires, g√©rant les NaNs pour la s√©rialisation JSON.
    Utilise default=str pour g√©rer la s√©rialisation des objets datetime.
    """
    data_to_save = {
        "entreprises": df_e.astype(object).where(pd.notnull(df_e), None).to_dict(orient="records"),
        "contacts": df_c.astype(object).where(pd.notnull(df_c), None).to_dict(orient="records"),
        "actions": df_a.astype(object).where(pd.notnull(df_a), None).to_dict(orient="records"),
    }
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data_to_save, f, indent=2, ensure_ascii=False, default=str)
    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde des donn√©es ERM : {e}")

# --- CALLBACKS FOR ERM DATA MODIFICATION ---
def on_erm_data_changed():
    """Callback pour sauvegarder les donn√©es ERM lorsque des modifications sont d√©tect√©es."""
    save_global_erm_data(st.session_state.get('df_entreprises_erm'), st.session_state.get('df_contacts_erm'), st.session_state.get('df_actions_erm'))


# --- INITIALISATION DE L'√âTAT DE SESSION POUR L'AUTHENTIFICATION ET ERM ---
# print(f"{datetime.datetime.now()} - INFO - Initializing session state variables.") # Optional: uncomment for runtime debugging
# Initialisation des DataFrames ERM s'ils n'existent pas encore dans la session.
# Sera rempli par load_global_erm_data plus tard.
if "df_entreprises_erm" not in st.session_state:
    st.session_state.df_entreprises_erm = pd.DataFrame(columns=config.ENTREPRISES_ERM_COLS)
if "df_contacts_erm" not in st.session_state:
    st.session_state.df_contacts_erm = pd.DataFrame(columns=config.CONTACTS_ERM_COLS)
if "df_actions_erm" not in st.session_state:
    st.session_state.df_actions_erm = pd.DataFrame(columns=config.ACTIONS_ERM_COLS)
if "confirm_flush" not in st.session_state:
    st.session_state.confirm_flush = False
if "editor_key_version" not in st.session_state:
    st.session_state.editor_key_version = 0
if "df_search_results" not in st.session_state:
    st.session_state.df_search_results = None
if "search_coordinates" not in st.session_state:
    st.session_state.search_coordinates = None
if "search_radius" not in st.session_state:
    st.session_state.search_radius = None

# --- GESTION DE L'√âTAT DE SESSION POUR LES PARAM√àTRES DE RECHERCHE ---
# Initialise les s√©lections par d√©faut pour les filtres NAF et effectifs
# si elles ne sont pas d√©j√† pr√©sentes dans l'√©tat de session.
# --- TITRE ET DESCRIPTION (Toujours visible) ---
st.title(
    "üîé Application de recherche d'employeurs potentiels pour candidatures spontan√©es"
)
st.markdown(
    "Trouvez des entreprises en fonction d'une adresse, d'un rayon, de secteurs d'activit√© (NAF) et de tranches d'effectifs salari√©s."
)


st.header("Param√®tres de recherche")

# --- Gestion √©tat session pour les filtres de recherche ---
if "selected_naf_letters" not in st.session_state:
    st.session_state.selected_naf_letters = ["F", "G", "J"]
if "selected_effectifs_codes" not in st.session_state:
    st.session_state.selected_effectifs_codes = [
        "11",
        "12",
        "21",
        "22",
        "31",
        "32",
        "41",
        "42",
        "51",
        "52",
        "53",
    ]
if "selected_specific_naf_codes" not in st.session_state:
    st.session_state.selected_specific_naf_codes = set()
else:
    if not isinstance(st.session_state.selected_specific_naf_codes, set):
        st.session_state.selected_specific_naf_codes = set(
            st.session_state.selected_specific_naf_codes
        )

# --- Initialisation et V√©rification du chargement des donn√©es NAF ---
# This call will trigger load_naf_dictionary (and its caching) 
# and populate data_utils.naf_detailed_lookup
data_utils.get_naf_lookup()

if data_utils.naf_detailed_lookup is None: # Check if loading was successful
    st.error(
        "Erreur critique : Le dictionnaire NAF n'a pas pu √™tre charg√©. "
        "V√©rifiez la pr√©sence et le format du fichier NAF.csv. L'application ne peut pas continuer."   
    )
    st.stop()

# --- Chargement des donn√©es ERM dans l'√©tat de session ---
if "erm_data_loaded" not in st.session_state:
    st.session_state.df_entreprises_erm, \
    st.session_state.df_contacts_erm, \
    st.session_state.df_actions_erm = load_global_erm_data()
    st.session_state.erm_data_loaded = True    

col_gauche, col_droite = st.columns(2)

with col_gauche:
    st.subheader("üìç Localisation")
    # Utilisation de sous-colonnes pour contr√¥ler la largeur des champs de saisie
    input_col_loc, _ = st.columns(
        [2, 1]
    )  # Les champs prendront 2/3 de la largeur de col_gauche
    with input_col_loc:
        adresse_input = st.text_input(
            "Adresse ou commune de r√©f√©rence",
            placeholder="Ex: 1, avenue du docteur Gley 75020 Paris",
            help="Veuillez saisir une adresse, id√©alement compl√®te, pour lancer la recherche.",
        )
        default_radius = 5.0
        radius_input = st.number_input(
            "Rayon de recherche (km)",
            min_value=0.1,
            max_value=50.0,
            value=default_radius,
            step=0.5,
            format="%.1f",
        )

    st.subheader("üìä Tranches d'effectifs salari√©s (√âtablissement)")

    def on_effectif_change(group_key_arg, codes_in_group_arg):
        """
        Callback pour la s√©lection des groupes de tranches d'effectifs.
        Met √† jour st.session_state.selected_effectifs_codes en fonction de la s√©lection du groupe.
        """
        eff_key = f"eff_group_{group_key_arg}"
        is_selected = st.session_state[eff_key]
        current_selection_codes_eff = set(st.session_state.selected_effectifs_codes)
        if is_selected:
            current_selection_codes_eff.update(codes_in_group_arg)
        else:
            current_selection_codes_eff.difference_update(codes_in_group_arg)
        st.session_state.selected_effectifs_codes = sorted(
            list(current_selection_codes_eff)
        )
        # Streamlit g√®re le rerun apr√®s l'ex√©cution du callback on_change.

    cols_eff = st.columns(2)
    col_idx_eff = 0
    for group_key, details in config.effectifs_groupes_details.items():
        is_group_currently_selected = any(
            code in st.session_state.selected_effectifs_codes
            for code in details["codes"]
        )
        with cols_eff[col_idx_eff % len(cols_eff)]:
            st.checkbox(
                f"{details['icon']} {details['label']}",
                value=is_group_currently_selected,
                key=f"eff_group_{group_key}",
                on_change=on_effectif_change,
                args=(group_key, details["codes"]),
            )
        col_idx_eff += 1

with col_droite:
    st.subheader("üìÇ Secteurs d'activit√© NAF")
    st.caption(
        "S√©lectionnez les sections larges. Vous pourrez affiner par codes sp√©cifiques ci-dessous (optionnel)."
    )

    def on_section_change():
        """
        Callback pour la s√©lection des sections NAF.
        Met √† jour st.session_state.selected_naf_letters.
        Si une section est d√©s√©lectionn√©e, les codes NAF sp√©cifiques associ√©s √† cette section sont retir√©s de la s√©lection.
        """
        current_sections = []
        for letter in config.naf_sections_details:  # Utiliser la nouvelle structure
            if st.session_state.get(f"naf_section_{letter}", False):
                current_sections.append(letter)
        if set(current_sections) != set(st.session_state.selected_naf_letters):
            st.session_state.selected_naf_letters = current_sections
            st.session_state.selected_specific_naf_codes = {
                code
                for code in st.session_state.selected_specific_naf_codes
                if data_utils.get_section_for_code(code)
                in st.session_state.selected_naf_letters
            }
            # Streamlit g√®re le rerun.

    cols_naf = st.columns(2)
    col_idx_naf = 0
    for letter, details in sorted(config.naf_sections_details.items()):
        with cols_naf[col_idx_naf]:
            st.checkbox(
                f"{details['icon']} {details['description']}",
                value=(letter in st.session_state.selected_naf_letters),
                key=f"naf_section_{letter}",
                on_change=on_section_change,
            )
        col_idx_naf = (col_idx_naf + 1) % len(cols_naf)

    # --- Affinage Optionnel par Codes NAF Sp√©cifiques ---
    with st.expander("Affiner par codes NAF sp√©cifiques (Optionnel)", expanded=False):
        selected_sections_sorted = sorted(st.session_state.selected_naf_letters)
        if not selected_sections_sorted:
            st.caption(
                "S√©lectionnez au moins une section NAF ci-dessus pour pouvoir affiner par code."
            )
        else:

            def on_specific_naf_change(change_type, section_letter=None, code=None):
                """
                Callback pour la s√©lection des codes NAF sp√©cifiques.
                G√®re la s√©lection/d√©s√©lection de tous les codes d'une section ou d'un code individuel.
                """
                if change_type == "select_all":
                    select_all_key = f"select_all_{section_letter}"
                    should_select_all = st.session_state[select_all_key]
                    codes_in_section = set(
                        data_utils.get_codes_for_section(section_letter)
                    )
                    if should_select_all:
                        st.session_state.selected_specific_naf_codes.update(
                            codes_in_section
                        )
                    else:
                        st.session_state.selected_specific_naf_codes.difference_update(
                            codes_in_section
                        )
                elif change_type == "individual":
                    cb_key = f"specific_naf_cb_{code}"
                    is_selected = st.session_state[cb_key]
                    if is_selected:
                        st.session_state.selected_specific_naf_codes.add(code)
                    else:
                        st.session_state.selected_specific_naf_codes.discard(code)
                # Streamlit g√®re le rerun.

            for section_letter in selected_sections_sorted:
                section_details = config.naf_sections_details.get(section_letter)
                section_description = (
                    section_details["description"]
                    if section_details
                    else section_letter
                )
                st.markdown(
                    f"##### Codes sp√©cifiques pour Section {section_description}"
                )
                codes_in_this_section = data_utils.get_codes_for_section(section_letter)
                if not codes_in_this_section:
                    st.caption("_Aucun code d√©taill√© trouv√© pour cette section._")
                    st.markdown("---")
                    continue
                all_codes_in_section_set = set(codes_in_this_section)
                are_all_selected = all_codes_in_section_set.issubset(
                    st.session_state.selected_specific_naf_codes
                )
                st.checkbox(
                    "Tout s√©lectionner / D√©s√©lectionner pour cette section",
                    value=are_all_selected,
                    key=f"select_all_{section_letter}",
                    on_change=on_specific_naf_change,
                    args=("select_all", section_letter),
                )
                st.markdown("---")
                cols_specific_naf = st.columns(2)
                col_idx_specific = 0
                for code in codes_in_this_section:
                    libelle = data_utils.naf_detailed_lookup.get(
                        code, "Libell√© inconnu"
                    )
                    with cols_specific_naf[col_idx_specific % len(cols_specific_naf)]:
                        st.checkbox(
                            f"{code} - {libelle}",
                            value=(
                                code in st.session_state.selected_specific_naf_codes
                            ),
                            key=f"specific_naf_cb_{code}",
                            on_change=on_specific_naf_change,
                            args=("individual", None, code),
                        )
                    col_idx_specific += 1
                st.markdown("---")
        if st.session_state.selected_specific_naf_codes:
            st.caption(
                f"{len(st.session_state.selected_specific_naf_codes)} code(s) NAF sp√©cifique(s) s√©lectionn√©(s) au total."
            )


st.markdown("---") # S√©parateur avant la section du bouton de recherche

# Section pour le bouton de recherche et les informations associ√©es
# Le bouton est centr√© en utilisant des colonnes "spacer"
col_spacer_gauche, col_contenu_bouton, col_spacer_droit = st.columns([2, 3, 2]) # Ajustez les ratios si besoin (ex: [1,1,1] ou [2,3,2])

with col_contenu_bouton:
    lancer_recherche = st.button(
        "üöÄ Rechercher les entreprises", 
        type="primary", 
        key="main_search_button", 
        use_container_width=True # Le bouton prendra toute la largeur de col_contenu_bouton
    )

# Le message d'information est plac√© sous le bouton, occupant la pleine largeur
st.info(
    "Note : Les r√©sultats d'une nouvelle recherche sont **ajout√©s** au tableau ci-dessous. "
    "Utilisez le bouton 'Effacer le tableau des √©tablissements' dans la 'Zone de danger' pour repartir d'une liste vide."
    )
st.markdown("---")

# --- ZONE D'AFFICHAGE DES R√âSULTATS ---
results_container = st.container()

# --- LOGIQUE PRINCIPALE DE RECHERCHE ---
if lancer_recherche:
    results_container.empty()  # Nettoyer les anciens r√©sultats
    
    # --- V√©rifications initiales ---
    if not adresse_input or not adresse_input.strip():
        st.error("‚ö†Ô∏è Veuillez saisir une adresse de r√©f√©rence pour lancer la recherche.")
        st.stop()
    if not st.session_state.selected_naf_letters:
        st.error("‚ö†Ô∏è Veuillez s√©lectionner au moins une section NAF.")
        st.stop()
    if not st.session_state.selected_effectifs_codes:
        st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins une tranche d'effectifs.")
        st.stop()

    # Construction de la liste finale des codes NAF pour l'appel API.
    # Si des codes sp√©cifiques sont s√©lectionn√©s pour une section, ils sont utilis√©s.
    # Sinon, tous les codes de la section s√©lectionn√©e sont utilis√©s.
    final_codes_for_api = set()
    selected_specifics = st.session_state.selected_specific_naf_codes
    
    for section_letter in st.session_state.selected_naf_letters:
        specifics_in_section = {
            code
            for code in selected_specifics
            if data_utils.get_section_for_code(code) == section_letter
        }
        if specifics_in_section:
            final_codes_for_api.update(specifics_in_section)
        else:
            all_codes_in_section = data_utils.get_codes_for_section(section_letter)
            final_codes_for_api.update(all_codes_in_section)

    if not final_codes_for_api:
        st.error(
            "‚ö†Ô∏è Aucun code NAF r√©sultant de votre s√©lection. V√©rifiez vos choix de sections et de codes sp√©cifiques."
        )
        st.stop()

    # Pr√©parer les param√®tres API
    final_api_params = {
        "activite_principale": ",".join(sorted(list(final_codes_for_api)))
    }

    # --- D√©but du processus dans le conteneur de r√©sultats ---
    with results_container:
        st.info(
            f"Recherche pour {len(final_codes_for_api)} code(s) NAF sp√©cifique(s) r√©sultant de la s√©lection."
        )
        codes_display = final_api_params["activite_principale"]
        if len(codes_display) > 200:
            codes_display = codes_display[:200] + "..."
        # 1. G√©ocodage
        coordonnees = geo_utils.geocoder_ban_france(adresse_input)
        if coordonnees is None:
            # L'erreur est d√©j√† affich√©e par geocoder_ban_france
            st.stop()
        lat_centre, lon_centre = coordonnees

        # 2. Lancer la recherche API
        entreprises_trouvees = api_client.rechercher_geographiquement_entreprises(
            lat_centre, lon_centre, radius_input, final_api_params
        )

        # --- Traitement et Affichage des r√©sultats ---
        if entreprises_trouvees is not None:
            df_resultats = data_utils.traitement_reponse_api(
                entreprises_trouvees, st.session_state.selected_effectifs_codes
            )

            # Stocker les r√©sultats et le contexte de la recherche dans l'√©tat de session
            # pour permettre un affichage persistant m√™me apr√®s des reruns (ex: ajout √† l'ERM).
            st.session_state.df_search_results = df_resultats.copy()
            st.session_state.search_coordinates = (lat_centre, lon_centre)
            st.session_state.search_radius = radius_input

            # Les messages de succ√®s, la carte et la l√©gende sont g√©r√©s en dehors de ce bloc `if lancer_recherche`,
            # en utilisant l'√©tat de session, pour persister √† travers les reruns (par exemple,
            # apr√®s un rerun d√©clench√© par l'ajout d'une entreprise √† l'ERM).

            # Display messages for no results or API errors (these don't need to persist beyond the initial search action)
            if entreprises_trouvees is not None:
                if (
                    len(df_resultats) == 0
                ):  # df_resultats is defined from session_state or fresh search
                    if (
                        entreprises_trouvees == []
                    ):  # API returned empty list for the geo search with NAF
                        st.info(
                            "Aucune entreprise trouv√©e correspondant aux crit√®res NAF/APE dans la zone sp√©cifi√©e."
                        )
                    else:  # API returned results, but filtering by effectifs reduced to zero
                        st.info(
                            "Des entreprises ont √©t√© trouv√©es dans la zone pour les crit√®res NAF/APE, mais aucun de leurs √©tablissements actifs ne correspond aux tranches d'effectifs s√©lectionn√©es."
                        )
            else:  # entreprises_trouvees is None, indicating an API call failure
                st.error(
                    "La recherche d'entreprises a √©chou√© en raison d'une erreur lors de la communication avec l'API. V√©rifiez les messages d'erreur ci-dessus."
                )

        # --- Ajout automatique des nouvelles entreprises √† l'ERM en session ---
        if not df_resultats.empty:  # Uniquement si des r√©sultats de recherche existent
            # S'assurer que df_entreprises existe et a la colonne SIRET, sinon initialiser comme vide.
            if "SIRET" not in st.session_state.df_entreprises_erm.columns: # Devrait √™tre initialis√© avec les colonnes
                sirets_in_erm = pd.Series(dtype="object") # Cas de s√©curit√© si df_entreprises_erm est mal initialis√©
            else:
                sirets_in_erm = st.session_state.df_entreprises_erm["SIRET"]

            # Identifier les nouvelles entreprises
            df_new_entreprises = df_resultats[
                ~df_resultats["SIRET"].isin(sirets_in_erm)
            ].copy()  # Use .copy() to avoid SettingWithCopyWarning

            if (
                not df_new_entreprises.empty
            ):  # Si de nouvelles entreprises sont trouv√©es

                df_to_add = df_new_entreprises.copy()

                # S'assurer que toutes les colonnes de config.ENTREPRISES_ERM_COLS existent dans df_to_add
                # Les colonnes non pr√©sentes dans df_new_entreprises (issues de la recherche)
                # mais attendues dans l'ERM (comme 'Notes Personnelles', 'Statut Piste') seront ajout√©es avec NA.
                for col in config.ENTREPRISES_ERM_COLS:
                    if col not in df_to_add.columns:
                        df_to_add[col] = pd.NA
                
                # S√©lectionner et ordonner les colonnes selon config.ENTREPRISES_ERM_COLS
                df_to_add = df_to_add.reindex(columns=config.ENTREPRISES_ERM_COLS)

                st.session_state.df_entreprises_erm = pd.concat(
                    [st.session_state.df_entreprises_erm, df_to_add], ignore_index=True
                ).reindex(columns=config.ENTREPRISES_ERM_COLS) # Assurer l'ordre et la pr√©sence de toutes les colonnes ERM

                # Ensure 'Date de cr√©ation Entreprise' is datetime after concatenation
                if "Date de cr√©ation Entreprise" in st.session_state.df_entreprises_erm.columns:
                    st.session_state.df_entreprises_erm["Date de cr√©ation Entreprise"] = pd.to_datetime(
                        st.session_state.df_entreprises_erm["Date de cr√©ation Entreprise"],
                        errors='coerce'  # Convert unparseable dates to NaT
                    )

                on_erm_data_changed() # Sauvegarder les modifications

                st.success(
                    f"{len(df_new_entreprises)} nouvelle(s) entreprise(s) automatiquement ajout√©e(s) √† votre ERM. N'oubliez pas de sauvegarder vos modifications !"
                )
                st.session_state.editor_key_version += 1
                st.rerun()

            elif not df_resultats.empty:
                st.info(
                    "‚úîÔ∏è Toutes les entreprises trouv√©es dans cette recherche sont d√©j√† dans votre ERM ou la recherche n'a pas retourn√© de nouvelles entreprises √† ajouter."
                )

    # --- SECTION ERM ---


# --- AFFICHAGE PERSISTANT DES R√âSULTATS DE RECHERCHE (SI EXISTANTS) ---
with results_container:
    if (
        st.session_state.df_search_results is not None
        and not st.session_state.df_search_results.empty
        and st.session_state.search_coordinates is not None
        and st.session_state.search_radius is not None
    ):
        # Utiliser les variables de session pour afficher les r√©sultats
        df_search_results_display = st.session_state.df_search_results
        lat_centre_display, lon_centre_display = st.session_state.search_coordinates
        radius_display = st.session_state.search_radius

        st.success(
            f"üìä {len(df_search_results_display)} √©tablissements trouv√©s correspondant √† tous les crit√®res."
        )

        # Affichage Carte
        # La carte est affich√©e si des r√©sultats valides (avec coordonn√©es) existent.
        st.subheader("Carte des √©tablissements trouv√©s")
        df_map_display = df_search_results_display.dropna(
            subset=["Latitude", "Longitude", "Radius", "Color"]
        ).copy()

        if not df_map_display.empty:
            zoom_level = 11
            # Ajustement du niveau de zoom initial en fonction du rayon de recherche
            if radius_display <= 1:
                zoom_level = 14
            elif radius_display <= 5:
                zoom_level = 12
            elif radius_display <= 10:
                zoom_level = 11
            elif radius_display <= 25:
                zoom_level = 10
            else:
                zoom_level = 9

            initial_view_state = pdk.ViewState(
                latitude=lat_centre_display,
                longitude=lon_centre_display,
                zoom=zoom_level,
                pitch=0,
                bearing=0,
            )
            layer = pdk.Layer(
                "ScatterplotLayer",
                data=df_map_display,
                get_position="[Longitude, Latitude]",
                get_color="Color",
                get_radius="Radius",
                radius_min_pixels=3,
                radius_max_pixels=60,
                pickable=True,
                auto_highlight=True,
            )
            tooltip = {
                "html": "<b>{D√©nomination - Enseigne}</b><br/>SIRET: {SIRET}<br/>Activit√© √âtab.: {Activit√© NAF/APE Etablissement}<br/>Effectif √âtab.: {Nb salari√©s √©tablissement}",
                "style": {
                    "backgroundColor": "rgba(0,0,0,0.7)",
                    "color": "white",
                    "border": "1px solid white",
                    "padding": "5px",
                },
            }
            deck = pdk.Deck(
                layers=[layer],
                initial_view_state=initial_view_state,
                map_style="mapbox://styles/mapbox/light-v9",
                tooltip=tooltip,
                height=600,
            )
            st.pydeck_chart(deck)

            # Affichage L√©gende
            # La l√©gende est g√©n√©r√©e dynamiquement en fonction des donn√©es affich√©es sur la carte.
            st.subheader("L√©gende")
            cols_legende = st.columns([1, 2])
            with cols_legende[0]:
                st.markdown("**Taille ‚âà Effectif √©tablissement**")
                legend_pixel_sizes = {"01": 8, "12": 12, "32": 18, "53": 24}
                base_circle_style = "display: inline-block; border-radius: 50%; background-color: #808080; margin-right: 5px; vertical-align: middle;"
                legend_sizes = {
                    "01": "Petit",
                    "12": "Moyen",
                    "32": "Grand",
                    "53": "Tr√®s Grand",
                }
                active_eff_codes = set(
                    st.session_state.selected_effectifs_codes
                )
                displayed_legend_sizes = set()
                for (
                    group_label,
                    group_codes,
                ) in config.effectifs_groupes.items():
                    if any(code in active_eff_codes for code in group_codes):
                        rep_code = next(
                            (c for c in ["01", "12", "32", "53"] if c in group_codes),
                            None,
                        )
                        if rep_code and rep_code not in displayed_legend_sizes:
                            displayed_legend_sizes.add(rep_code)
                            label = legend_sizes[rep_code]
                            pixel_size = legend_pixel_sizes.get(rep_code, 8)
                            circle_html = f'<span style="{base_circle_style} height: {pixel_size}px; width: {pixel_size}px;"></span>'
                            st.markdown(
                                f"{circle_html} {label} ({group_label})",
                                unsafe_allow_html=True,
                            )
            with cols_legende[1]:
                st.markdown("**Couleur = Secteur d'activit√©**")
                if "Section NAF" in df_map_display.columns:
                    sections_in_final_results = sorted(
                        list(set(df_map_display["Section NAF"].unique()) - {"N/A"})
                    )
                    if not sections_in_final_results:
                        st.caption("Aucune section NAF trouv√©e dans les r√©sultats.")
                    else:
                        # Cr√©er 3 colonnes pour la l√©gende des couleurs NAF
                        legend_color_cols = st.columns(3)
                        col_idx_legend_color = 0
                        for letter in sections_in_final_results:
                            if letter in config.naf_sections_details:
                                # Placer chaque √©l√©ment de la l√©gende dans une colonne
                                with legend_color_cols[
                                    col_idx_legend_color % len(legend_color_cols)
                                ]:
                                    color_rgb = config.naf_color_mapping.get(
                                        letter, [128, 128, 128]
                                    )
                                    color_hex = "#%02x%02x%02x" % tuple(color_rgb)
                                    desc_legende = config.naf_sections_details[letter][
                                        "description"
                                    ]
                                    st.markdown(
                                        f"<span style='color:{color_hex}; font-size: 1.2em; display: inline-block; margin-right: 4px;'>‚¨§</span>{desc_legende}",  # Ajustement taille et espacement
                                        unsafe_allow_html=True,
                                    )
                                col_idx_legend_color += 1

                else:
                    st.warning(
                        "Colonne 'Section NAF' non trouv√©e pour la l√©gende des couleurs."
                    )
        else:
            st.info(
                "Aucun √©tablissement avec des coordonn√©es g√©ographiques valides √† afficher sur la carte."
            )

    # Les messages "aucun r√©sultat" ou "erreur API" sont g√©r√©s dans le bloc `if lancer_recherche:`
    # car ils sont un retour direct √† l'action de recherche et n'ont pas besoin de persister
    # de la m√™me mani√®re que la carte pour des r√©sultats r√©ussis apr√®s un rerun.

# --- AFFICHAGE DU TABLEAU ERM ---
# Ce tableau affiche les entreprises stock√©es dans st.session_state.df_entreprises_erm.
if st.session_state.df_entreprises_erm.empty:
    st.info(
        "Aucune entreprise dans votre liste pour le moment. Lancez une recherche pour en ajouter."
    )
        # The clear button is hidden if the table is already empty
else:  # df_entreprises_erm is not empty
    st.subheader("Tableau des √©tablissements trouv√©s")

    # Create a copy for display modifications
    df_display_erm = st.session_state.df_entreprises_erm.copy()

    # Assurer que 'Effectif Num√©rique' est correctement peupl√© pour le formatage de l'affichage
    # et le tri potentiel (bien que le tri ne soit pas directement impl√©ment√© ici pour l'affichage).
    if 'Code effectif √©tablissement' in df_display_erm.columns:
        df_display_erm['Effectif Num√©rique'] = df_display_erm['Code effectif √©tablissement'] \
            .map(config.effectifs_numerical_mapping) \
            .fillna(0) # Default to 0 if mapping fails or code is NA
        # Ensure it's integer type
        df_display_erm['Effectif Num√©rique'] = pd.to_numeric(df_display_erm['Effectif Num√©rique'], errors='coerce').fillna(0).astype(int)
    elif 'Effectif Num√©rique' not in df_display_erm.columns:
        # If 'Code effectif √©tablissement' is also missing, and 'Effectif Num√©rique' is missing, create it with default
        df_display_erm['Effectif Num√©rique'] = 0
    else:
        # If 'Effectif Num√©rique' exists but 'Code effectif √©tablissement' does not, ensure it's the correct type and fill NAs
        df_display_erm['Effectif Num√©rique'] = pd.to_numeric(df_display_erm['Effectif Num√©rique'], errors='coerce').fillna(0).astype(int)


    if 'Effectif Num√©rique' in df_display_erm.columns and 'Nb salari√©s √©tablissement' in df_display_erm.columns:
        # Formate la colonne "Nb salari√©s √©tablissement" pour l'affichage en pr√©fixant avec une lettre bas√©e sur l'effectif num√©rique.
        def format_effectif_for_display(row):
            num_val = row.get('Effectif Num√©rique') # Ex: 0, 1, 3, 10...
            text_val = row.get('Nb salari√©s √©tablissement') # Ex: "1 ou 2 salari√©s"

            letter_prefix = ""
            if pd.notna(num_val):
                try:
                    # Assurer que num_val est un entier pour la cl√© du dictionnaire
                    num_val_int = int(num_val) 
                    letter_prefix = config.effectif_numeric_to_letter_prefix.get(num_val_int, "")
                except (ValueError, TypeError):
                    pass # Si num_val n'est pas convertible en int, letter_prefix reste ""
            
            text_upper = str(text_val).upper() if pd.notna(text_val) else "N/A"

            return f"{letter_prefix} - {text_upper}" if letter_prefix else text_upper
        
        df_display_erm['Nb salari√©s √©tablissement'] = df_display_erm.apply(format_effectif_for_display, axis=1)

    # G√©n√©ration des colonnes de liens pour LinkedIn, Google Maps, et Indeed.
    if "D√©nomination - Enseigne" in df_display_erm.columns:
        df_display_erm["LinkedIn"] = df_display_erm["D√©nomination - Enseigne"].apply(
            lambda x: f"https://www.google.com/search?q={x}+site%3Alinkedin.com"
            if pd.notna(x) and x.strip() != "" 
            else None
        )
    if (
        "D√©nomination - Enseigne" in df_display_erm.columns
        and "Adresse √©tablissement" in df_display_erm.columns
    ):
        df_display_erm["Google Maps"] = df_display_erm.apply(
            lambda row: f"https://www.google.com/maps/search/?api=1&query={row['D√©nomination - Enseigne']},{row['Adresse √©tablissement']}"
            if pd.notna(row["D√©nomination - Enseigne"])
            and row["D√©nomination - Enseigne"].strip() != ""
            and pd.notna(row["Adresse √©tablissement"])
            and row["Adresse √©tablissement"].strip() != ""
            else None,
            axis=1,
        )
        if "D√©nomination - Enseigne" in df_display_erm.columns:
            df_display_erm["Indeed"] = df_display_erm[
                "D√©nomination - Enseigne"
            ].apply(
                lambda x: f"https://www.google.com/search?q={x}+site%3Aindeed.com"
                if pd.notna(x) and x.strip() != ""
                else None
            )
    # D√©finir les colonnes √† afficher et leur ordre
    # "Effectif Num√©rique" n'est pas affich√© directement mais utilis√© pour formater "Nb salari√©s √©tablissement".
    display_order_base = [
        "SIRET", "D√©nomination - Enseigne", 
        "Activit√© NAF/APE Etablissement", "Adresse √©tablissement", 
        "Nb salari√©s √©tablissement", # Colonne format√©e
        "Est si√®ge social", "Date de cr√©ation Entreprise",
        "Chiffre d'Affaires Entreprise", "R√©sultat Net Entreprise", "Ann√©e Finances Entreprise"
    ]
    cols_to_display_erm_tab = display_order_base[:]
    
    # Insert link columns at a specific position
    link_insert_index = cols_to_display_erm_tab.index("D√©nomination - Enseigne") + 1
    if "Indeed" in df_display_erm.columns and "Indeed" not in cols_to_display_erm_tab:
        cols_to_display_erm_tab.insert(link_insert_index, "Indeed")
    if "Google Maps" in df_display_erm.columns and "Google Maps" not in cols_to_display_erm_tab:
        cols_to_display_erm_tab.insert(link_insert_index, "Google Maps")
    if "LinkedIn" in df_display_erm.columns and "LinkedIn" not in cols_to_display_erm_tab:
        cols_to_display_erm_tab.insert(link_insert_index, "LinkedIn")

    cols_existantes_in_display_tab = [
        col for col in cols_to_display_erm_tab if col in df_display_erm.columns
    ]

    # Configuration des colonnes pour st.dataframe, incluant les types de colonnes et les labels.
    column_config_map = {
        "LinkedIn": st.column_config.LinkColumn("LinkedIn", display_text="üîó LinkedIn"),
        "Google Maps": st.column_config.LinkColumn("Google Maps", display_text="üìç Google Maps"),
        "Indeed": st.column_config.LinkColumn("Indeed", display_text="üîó Indeed"),
        "Est si√®ge social": st.column_config.CheckboxColumn(disabled=True),
        "Date de cr√©ation Entreprise": st.column_config.DateColumn(format="DD/MM/YYYY", disabled=True),
        "Chiffre d'Affaires Entreprise": st.column_config.NumberColumn(label="CA Ent.", format="%d ‚Ç¨", disabled=True),
        "Nb salari√©s √©tablissement": st.column_config.TextColumn(label="Nb salari√©s √©tablissement"), # Displays the new combined string
        "R√©sultat Net Entreprise": st.column_config.NumberColumn(label="R√©s. Net Ent.", format="%d ‚Ç¨", disabled=True),
    }

    st.dataframe(
        df_display_erm[cols_existantes_in_display_tab],
        column_config=column_config_map,
        hide_index=True,
        use_container_width=True,
    )

# --- BOUTON DE T√âL√âCHARGEMENT ERM ---
download_button_key = "download_user_erm_excel_button"
try:
    user_erm_excel_data = data_utils.generate_user_erm_excel(
        st.session_state.df_entreprises_erm,
        st.session_state.df_contacts_erm,
        st.session_state.df_actions_erm,
    )
    st.download_button(
        label="üì• T√©l√©charger les r√©sultats dans un classeur Excel)",
        data=user_erm_excel_data,
        file_name=f"mon_erm_global_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        key=download_button_key,
    )
except Exception as e:
    st.error(f"Erreur lors de la pr√©paration du t√©l√©chargement ERM : {e}")
st.markdown("---")
st.markdown(" Propuls√© avec les API Data Gouv : [API Recherche d‚ÄôEntreprises](https://www.data.gouv.fr/fr/dataservices/api-recherche-dentreprises/) & [API BAN France](https://www.data.gouv.fr/fr/dataservices/api-adresse-base-adresse-nationale-ban/)")
st.markdown("---")
# --- Bouton pour effacer le tableau des √©tablissements ---
if not st.session_state.df_entreprises_erm.empty:
    with st.expander("Zone de danger", expanded=True):
        st.warning("Attention : Cette action effacera **toutes** les entreprises actuellement affich√©es dans le tableau.")
        if st.button("üóëÔ∏è Effacer le tableau des √©tablissements", key="clear_table_button_in_danger_zone"): # Ajout d'une cl√© unique
            st.session_state.df_entreprises_erm = pd.DataFrame(columns=config.ENTREPRISES_ERM_COLS) # R√©initialise le DataFrame
            # Optionnel: effacer aussi contacts et actions si li√©s, ou laisser pour une gestion manuelle
            # st.session_state.df_contacts_erm = pd.DataFrame(columns=config.CONTACTS_ERM_COLS)
            # st.session_state.df_actions_erm = pd.DataFrame(columns=config.ACTIONS_ERM_COLS)
            on_erm_data_changed() # Sauvegarder le fait que c'est vide
            st.session_state.editor_key_version += 1 # Increment key to force editor refresh if it were used
            st.session_state.df_search_results = None # Clear search results display as well
            st.rerun() # Rerun to update the display immediately
